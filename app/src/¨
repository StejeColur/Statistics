import React from 'react';
import { StyleSheet, View } from 'react-native';
import { Router, Switch, Route, Redirect } from './routing';
import { connect } from 'react-redux';
/*import { PrivateRoute } from './_components';*/
import { history } from './history';
import { alertActions, userActions } from './_actions';
/*import { authenticate } from './_reducers';*/
import { HomePage } from './HomePage';
import { LoginPage } from './LoginPage';
import {AsyncStorage} from 'react-native';


const fakeAuth = {
    isAuthenticated: false,
    authenticate() {
        AsyncStorage.getItem('user')
            .then((item) => {
                const data = JSON.parse(item);
                const data2 = item;
                console.log("APP: data");
                console.log(data);
                console.log(typeof data);
                console.log("APP: data2");
                console.log(data2);
                console.log(typeof data2);
            });

        this.isAuthenticated = true
        /*setTimeout(cb, 100)*/
    },
    signout(cb) {
        this.isAuthenticated = false
        setTimeout(cb, 100)
    }
}

/*const converToString = {*/
/*AsyncStorage.getItem('user')*/
/*.then((item) => {*/
/*data = JSON.parse(item),*/
/*data2 = item,*/
/*console.log("APP: data");*/
/*console.log(this.state.data);*/
/*console.log(typeof this.state.data);*/
/*console.log("APP: data2");*/
/*console.log(this.state.data2);*/
/*console.log(typeof this.state.data2);*/
/*});*/
/*};*/

const PrivateRoute = ({ component: Component, ...rest }) => (
    <Route {...rest} render={(props) => (
        /*fakeAuth.isAuthenticated === true*/
        /*localStorage.getItem('user')*/
		AsyncStorage.getItem('user')
        ? <Component {...props} />
        : <Redirect to={{ pathname: '/login', state: { from: props.location } }} />
    )} />
)

class App extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            isLoading: true,
            isLoaded: false,
            data: {},
            data2: "",
        }
        fakeAuth.authenticate();
        const { dispatch } = this.props;
        history.listen((location, action) => {
            // clear alert on location change
            dispatch(alertActions.clear());
        });
    }
    componentDidMount() {
        const accessToken = this.props.dispatch(userActions.getAccessToken());
        /*this.props.dispatch(userActions.getAccessToken());*/
        console.log("JA TAK ");
        console.log(accessToken);
        console.log("Hmmmm");

    }

    render() {
        /*const { alert } = this.props;*/
        return (
                <View style={styles.container}>
                    <Router history={history}>
                        <View>
                            <PrivateRoute exact path="/" component={HomePage} />
                            <Route path="/login" component={LoginPage} />
                        </View>
                    </Router>
                </View>
        );
    }
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
    marginTop: 50,
    padding: 50
  }
});

const mapStateToProps= state => {
    const { alert } = state;
    return {
        alert
    };
}


const connectedApp = connect(mapStateToProps)(App);
export { connectedApp as App };
